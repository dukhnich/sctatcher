{"version":3,"sources":["services/Sizes/reducer.js","services/Sizes/index.js","components/SpineCharacter.js","components/Game/Background.js","components/StartBanner/BannerHeader.js","components/StartBanner/ButtonText.js","consts.js","services/CurrentGame/reducer.js","store/root-reducer.js","store/configure-store.js","services/CurrentGame/actions.js","components/StartBanner/BannerButton.js","components/StartBanner/StartBanner.js","components/Game/CardSymbol.js","components/Mask.js","components/Game/Bonus/ScratchFrameBig.js","components/Game/Bonus/Bonus.js","components/Spine.js","components/Game/Character.js","components/Game/PlayingBoard/BoardHeader/BoardText.js","components/Game/PlayingBoard/BoardHeader/BoardHeader.js","components/Game/PlayingBoard/Set/ScratchFrame.js","components/Game/PlayingBoard/Set/Set.js","components/Game/PlayingBoard/PlayingBoard.js","components/Game/GameHeader.js","components/WinBanner/WinText.js","components/WinBanner/CurrencySymbol.js","components/WinBanner/SetValues.js","components/WinBanner/WinBanner.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["initialState","scale","widthBg","heightBg","widthScreen","window","innerWidth","heightScreen","innerHeight","sizesReducer","state","action","type","payload","SpineCharacter","app","onAssetsLoaded","loader","res","spineCharacter","PIXI","spine","Spine","spineData","name","x","screen","width","y","height","set","stage","addChild","setAnimation","start","React","useEffect","add","load","getChildByName","setEmptyAnimation","require","propTypes","PropTypes","object","isRequired","connect","sizes","texture","from","status","currentGame","dispatch","props","baseTexture","devicePixelRatio","renderer","children","WHITE","tint","alpha","visible","style","fill","fontFamily","fontSize","BannerHeader","useState","setX","ref","useRef","current","container","text","ButtonText","setY","wrapper","SUITS","getPngName","MAINRULES","suit","cardNumbersProperties","win","probability","coin","reduce","prev","i","length","numbersOfCards","BONUSRULES","dollar","statusCharacter","open","bonus","bonusSet","mainSet","currentGameReducer","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","pick","outcomesArr","totalProbs","dice","Math","random","currentSum","createSet","winSuit","winNumber","allSuits","suits","push","mixSet","position","floor","splice","changeCardStatus","number","a","newOpen","getState","Object","values","prevCard","isOpen","buttonMode","interactive","pointerup","game","CardSymbol","card","setSuit","symbol","on","pivot","drawRectangle","g","clear","beginFill","drawRect","endFill","drawBrush","r","drawCircle","Mask","CustomPIXIComponent","customDisplayObject","draw","mask","customApplyProps","instance","oldProps","frame","dragging","setDragging","brush","setBrush","pointerMove","event","data","global","setTimeout","pointerdown","pointermove","setContainer","SpineAnimation","setCurrent","firstText","setText1","secondText","setText2","suitSymbol","setSymbol","text1","text2","scratch","textureBg","bg","setBg","console","log","map","index","key","headerWidth","WinText","CurrencySymbol","textureDollar","bonusWin","setWin","w","wins","finalWin","entries","currency","value","countWin","setDollar","setCoin","currency1","currency2","banner","t","setW","tDollar","OPTIONS","backgroundColor","resolution","App","pending","setPending","options","Consumer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4881cda8.chunk.js","sourcesContent":["const initialState = {\r\n    scale: 0.25,\r\n    widthBg: 0,\r\n    heightBg: 0,\r\n    widthScreen: window.innerWidth,\r\n    heightScreen: window.innerHeight\r\n};\r\n\r\nconst sizesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"sizes/setSizes\":\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default sizesReducer;\r\n","export { default as sizesReducer } from \"./reducer\";\r\nexport * from \"./actions\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {connect} from \"react-redux\";\r\n\r\nwindow.PIXI = PIXI;\r\nrequire(\"pixi-spine\")\r\n\r\nfunction SpineCharacter({scale, app}) {\r\n\r\n    function onAssetsLoaded(loader, res) {\r\n        const spineCharacter = new window.PIXI.spine.Spine(res.spineCharacter.spineData);\r\n        // set the position\r\n        spineCharacter.name = 'spineCharacter';\r\n        spineCharacter.x = app.screen.width / 2;\r\n        spineCharacter.y = app.screen.height / 2;\r\n\r\n        spineCharacter.scale.set(scale);\r\n\r\n        app.stage.addChild(spineCharacter);\r\n\r\n        spineCharacter.state.setAnimation(0, 'red_loading_screen_animation_loop', true);\r\n        // console.log(spineCharacter.state)\r\n        app.start();\r\n    }\r\n\r\n    React.useEffect(()=>{\r\n        // console.log(app.stage.getChildAt(0))\r\n        app.loader\r\n            .add('spineCharacter', '/assets/char_spine_v5/Red.json')\r\n            .load(onAssetsLoaded);\r\n\r\n        return ()=> {\r\n            app.stage.getChildByName('spineCharacter').state.setEmptyAnimation(0);\r\n        }\r\n\r\n    },[])\r\n    return (<></>\r\n    );\r\n}\r\n\r\nSpineCharacter.propTypes = {\r\n    app: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        scale: state.sizes.scale,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(SpineCharacter);","import React from \"react\";\r\nimport { Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst bg = \"/assets/magic_forest_bg.jpg\";\r\nconst texture = PIXI.Texture.from(bg)\r\n\r\nfunction Background({status, scale, dispatch, heightScreen, ...props}) {\r\n    // const children = React.Children.map(props.children, child => {\r\n    //         return React.cloneElement(child, {container: texture});\r\n    //     }\r\n    // );\r\n    const width = texture.baseTexture.width;\r\n    const height = texture.baseTexture.height;\r\n    dispatch({ type: \"sizes/setSizes\", payload: {\r\n            widthBg: width,\r\n            heightBg: height,\r\n            scale: (heightScreen / (window.devicePixelRatio || 1))/height\r\n        }});\r\n\r\n\r\n\r\n    return(\r\n\r\n    <Sprite\r\n        scale = {scale}\r\n        texture={texture}\r\n        x={(props.app.renderer.screen.width - width*scale)/2}\r\n        y={(props.app.renderer.screen.height - height*scale)/2}\r\n    >\r\n        {props.children}\r\n        <Sprite\r\n            texture={PIXI.Texture.WHITE}\r\n            width ={width}\r\n            height = {height}\r\n            tint = {0x000000}\r\n            alpha={0.6}\r\n            visible={\"idle\" === status || \"finish\" === status}\r\n        />\r\n    </Sprite>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        status: state.currentGame.status,\r\n        scale: state.sizes.scale,\r\n        heightScreen: state.sizes.heightScreen,\r\n\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(Background);","import React from \"react\";\r\nimport {Sprite, Text, Container} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\n\r\nconst fontSize = 72;\r\nconst style = new PIXI.TextStyle({\r\n    fill: \"#ff8729\",\r\n    fontFamily: \"DRAguSans-Black\",\r\n    fontSize: fontSize\r\n});\r\nconst question = \"/assets/magic_forest_question_icon.png\";\r\nconst texture = PIXI.Texture.from(question)\r\n\r\nfunction BannerHeader(props) {\r\n    const [width, setX] = React.useState(0);\r\n    const ref = React.useRef()\r\n\r\n    React.useEffect(()=> {\r\n            setX(ref.current.width)\r\n        }\r\n        ,[])\r\n\r\n    return (\r\n        <Container\r\n            ref = {ref}\r\n            x={(props.container.baseTexture.width - width)/2}\r\n            y={props.container.baseTexture.height*0.15}\r\n        >\r\n            <Sprite texture={texture} />\r\n            <Text\r\n                style={ style}\r\n                text=\"How To Play\"\r\n                x = {texture.baseTexture.width*1.5}\r\n                y = {(texture.baseTexture.height - fontSize)/2}\r\n            />\r\n        </Container>\r\n     );\r\n}\r\n\r\nexport default BannerHeader;\r\n","import React from \"react\";\r\nimport {Sprite, Text, Container} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\n\r\nconst fontSize = 72;\r\nconst style = new PIXI.TextStyle({\r\n    fill: \"#ffFFFF\",\r\n    fontFamily: \"DRAguSans-Black\",\r\n    fontSize: fontSize\r\n});\r\nconst coin = \"/assets/magic_forest_coin_icon_small.png\";\r\nconst texture = PIXI.Texture.from(coin)\r\n\r\nfunction ButtonText(props) {\r\n    const [width, setX] = React.useState(0);\r\n    const [height, setY] = React.useState(0);\r\n    const wrapper = React.useRef();\r\n    const text = React.useRef()\r\n\r\n\r\n    React.useEffect(()=> {\r\n        // console.log(text.current.width)\r\n            setX(wrapper.current.width);\r\n            setY(wrapper.current.height)\r\n\r\n        }\r\n        ,[])\r\n\r\n    return (\r\n        <Container\r\n            ref = {wrapper}\r\n            x={(props.container.baseTexture.width - width)/2}\r\n            y={(props.container.baseTexture.height - height)/2}\r\n        >\r\n            <Text\r\n                ref = {text}\r\n                style={ style}\r\n                text=\"Play for 60\"\r\n                y = {(texture.baseTexture.height - fontSize*1.2)/2}\r\n            />\r\n            <Sprite\r\n                x = {text.current ? text.current.width + 20 : 0}\r\n                texture={texture} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ButtonText;\r\n","export const SUITS = [\"bonfire\", \"bow\", \"leaf\", \"rope\", \"tent\"];\r\nexport const CURRENCIES = [\"dollar\", \"coin\"];\r\n\r\n\r\nexport const getPngName = (name) => `/assets/magic_forest_${name}.png`\r\n\r\nexport const MAINRULES = [\r\n    {\r\n        suit: SUITS[0],\r\n        cardNumbersProperties:[\r\n            {\r\n                win: {},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 5\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 5\r\n            },\r\n            {\r\n                win:{\r\n                    coin: 25\r\n                },\r\n                probability: 10\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        suit: SUITS[1],\r\n        cardNumbersProperties:[\r\n            {\r\n                win: {},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 6\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 6\r\n            },\r\n            {\r\n                win:{\r\n                    coin: 30\r\n                },\r\n                probability: 8\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        suit: SUITS[2],\r\n        cardNumbersProperties:[\r\n            {\r\n                win: {},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 7\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 7\r\n            },\r\n            {\r\n                win:{\r\n                    coin: 35\r\n                },\r\n                probability: 6\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        suit: SUITS[3],\r\n        cardNumbersProperties:[\r\n            {\r\n                win: {},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 8\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 8\r\n            },\r\n            {\r\n                win:{\r\n                    coin: 50\r\n                },\r\n                probability: 4\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        suit: SUITS[0],\r\n        cardNumbersProperties:[\r\n            {\r\n                win: {},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 5\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 5\r\n            },\r\n            {\r\n                win:{\r\n                    coin: 25\r\n                },\r\n                probability: 10\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n        ]\r\n    },{\r\n        suit: SUITS[4],\r\n        cardNumbersProperties:[\r\n            {\r\n                win: {},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 9\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 9\r\n            },\r\n            {\r\n                win:{\r\n                    coin: 100\r\n                },\r\n                probability: 2\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n            {\r\n                win:{},\r\n                probability: 0\r\n            },\r\n        ]\r\n    },\r\n]\r\nfor (const suit of MAINRULES) {\r\n    suit.probability = suit.cardNumbersProperties.reduce((prev, current) => prev + current.probability,0);\r\n    for (let i = 0; i < suit.cardNumbersProperties.length; i++) {\r\n        suit.cardNumbersProperties[i].numbersOfCards = i\r\n    }\r\n}\r\n\r\nexport const BONUSRULES = [\r\n    {\r\n        win: {\r\n            dollar: 1\r\n        },\r\n        probability: 20\r\n    },\r\n    {\r\n        win: {\r\n            coin: 25\r\n        },\r\n        probability: 80\r\n    },\r\n]\r\n","import {SUITS} from \"../../consts\";\r\n\r\nconst initialState = {\r\n    statusCharacter: \"idle\",\r\n    status: \"idle\",\r\n    suit: SUITS[0],\r\n    open: {\r\n        bonus: [false],\r\n        set: [false,false,false,false,false,false]\r\n    },\r\n    bonusSet: {\r\n        set: [SUITS[0]],\r\n        win: {\r\n            coin: 25,\r\n            dollar: 0\r\n        }\r\n    },\r\n    mainSet: {\r\n        set: [SUITS[0],SUITS[2],SUITS[3],SUITS[4],SUITS[1],SUITS[2]],\r\n        win: {\r\n            coin: 0\r\n        }\r\n    }\r\n};\r\n\r\nconst currentGameReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"currentGame/statusCharacter\":\r\n            return {\r\n                ...state,\r\n                statusCharacter: action.payload\r\n            };\r\n        case \"currentGame/changeCardsStatus\":\r\n            return {\r\n                ...state,\r\n                open: action.payload\r\n            };\r\n        case \"currentGame/pending\":\r\n            return {\r\n                ...state,\r\n                status: \"pending\"\r\n            };\r\n        case \"currentGame/start\":\r\n            return {\r\n                ...state,\r\n                open: initialState.open,\r\n                status: \"play\",\r\n                ...action.payload\r\n            };\r\n        case \"currentGame/finish\":\r\n            return {\r\n                ...state,\r\n                status: \"finish\",\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default currentGameReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport {currentGameReducer} from \"../services/CurrentGame\";\r\nimport {sizesReducer} from \"../services/Sizes\";\r\n\r\n\r\nexport default combineReducers(\r\n{\r\n            currentGame: currentGameReducer,\r\n            sizes: sizesReducer\r\n        }\r\n);","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./root-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nexport default store;\r\n","import store from \"../../store/configure-store\";\r\nimport {BONUSRULES, MAINRULES, SUITS} from \"../../consts\";\r\n\r\nconst pick = (outcomesArr) => {\r\n    const totalProbs = outcomesArr.reduce((prev, current) => prev + current.probability,0)\r\n    const dice = Math.random()*totalProbs;\r\n    let currentSum = 0;\r\n    for (let i = 0; i < totalProbs; i++) {\r\n        currentSum += outcomesArr[i].probability;\r\n        if (dice <= currentSum) {\r\n            return outcomesArr[i]\r\n        }\r\n    }\r\n}\r\n\r\nconst createSet = (winSuit, winNumber, allSuits, length) => {\r\n    const suits = allSuits.reduce((prev, suit) => {\r\n            if (suit !== winSuit) {\r\n                prev.push({suit: suit, probability: 1})\r\n            }\r\n            return prev\r\n        },\r\n        [])\r\n    // console.log(suits)\r\n    const set = [];\r\n    for (let i = 0; i <length; i++) {\r\n        set[i] = ((i < winNumber) ? winSuit : pick(suits).suit)\r\n    }\r\n    const mixSet = [];\r\n    for (let i = 0; i <length; i++) {\r\n        const position = Math.floor(Math.random()*set.length)\r\n        mixSet[i] = set[position];\r\n        set.splice(position, 1)\r\n    }\r\n    return mixSet\r\n}\r\n\r\nexport const startGame = () => async (dispatch) => {\r\n    const suit = pick(MAINRULES);\r\n    const number = pick(suit.cardNumbersProperties);\r\n    const bonus = pick(BONUSRULES);\r\n    const set = createSet(suit.suit, number.numbersOfCards, SUITS, 6);\r\n\r\n    const game =\r\n        {\r\n            suit: suit.suit,\r\n            bonusSet: {\r\n                set: [suit.suit],\r\n                win: bonus.win\r\n            },\r\n            mainSet: {\r\n                set: set,\r\n                win: number.win\r\n            }\r\n        }\r\n\r\n    dispatch({ type: \"currentGame/start\", payload: game });\r\n\r\n};\r\n\r\nexport const changeCardStatus = (type, number) => async (dispatch) => {\r\n    const newOpen = {...store.getState().currentGame.open};\r\n    if (newOpen[type] && newOpen[type].length > number) {\r\n        newOpen[type] = [...newOpen[type]];\r\n        newOpen[type][number] = !newOpen[type][number];\r\n    }\r\n    dispatch({ type: \"currentGame/changeCardsStatus\", payload: newOpen});\r\n\r\n    let isEnd = Object.values(newOpen).reduce((prev, current) => {\r\n        return current.reduce((prevCard, isOpen) =>\r\n            isOpen ? prevCard : false, true) ?\r\n            prev : false\r\n        }, true)\r\n    if (isEnd) {\r\n        dispatch({ type: \"currentGame/finish\"});\r\n    }\r\n};\r\n\r\n","import React from \"react\";\r\nimport {Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport ButtonText from \"./ButtonText\";\r\nimport {connect} from \"react-redux\";\r\nimport {startGame} from \"../../services/CurrentGame\";\r\n\r\nconst button = \"/assets/magic_forest_button.png\";\r\nconst texture = PIXI.Texture.from(button)\r\n\r\nfunction BannerButton({status, container, dispatch, ...props}) {\r\n    const [width, setX] = React.useState(0);\r\n    const ref = React.useRef()\r\n\r\n    React.useEffect(()=> {\r\n            setX(ref.current.width)\r\n        }\r\n        ,[])\r\n\r\n    return (\r\n            <Sprite\r\n                buttonMode\r\n                interactive\r\n                pointerup={() => dispatch(startGame())}\r\n                // pointerup={() => console.log(\"click\")}\r\n                ref = {ref}\r\n                x={(container.baseTexture.width - width)/2}\r\n                y={container.baseTexture.height/2}\r\n                texture={texture}\r\n            >\r\n            <ButtonText container = {texture}/>\r\n            </Sprite>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        status: state.currentGame.status,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(BannerButton);\r\n","import React from \"react\";\r\nimport {Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport BannerHeader from \"./BannerHeader\";\r\nimport BannerButton from \"./BannerButton\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst banner = \"/assets/magic_forest_frame2.png\";\r\nconst texture = PIXI.Texture.from(banner)\r\n\r\nfunction StartBanner({scale, status, ...props}) {\r\n    return (\r\n        <Sprite\r\n            scale = {scale}\r\n            x={(props.app.renderer.screen.width - texture.baseTexture.width*scale)/2}\r\n            y={props.app.renderer.screen.height - texture.baseTexture.height*scale}\r\n            texture={texture}\r\n            visible={status === \"idle\" || status === \"finish\"}\r\n        >\r\n            <BannerHeader container = {texture}/>\r\n            <BannerButton container = {texture}/>\r\n        </Sprite>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        scale: state.sizes.scale,\r\n        status: state.currentGame.status,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(StartBanner);","import React from \"react\";\r\nimport {Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {getPngName} from \"../../consts\";\r\n\r\n\r\n\r\nfunction CardSymbol({card, ...props}) {\r\n    const texture = PIXI.Texture.from(getPngName(card))\r\n\r\n    const [suit, setSuit] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const symbol = React.useRef();\r\n    // console.log(suit, card)\r\n\r\n    React.useEffect(()=> {\r\n            texture.on('update', () => {\r\n                setSuit(symbol.current);\r\n                // console.log(texture.baseTexture)\r\n                // console.log(texture.baseTexture.width, current.width)\r\n            });\r\n        }\r\n        ,[])\r\n    return (\r\n            <Sprite\r\n                ref={symbol}\r\n                pivot={[texture.baseTexture.width/2, texture.baseTexture.height/2]}\r\n                {...props}\r\n                texture={texture}\r\n            />\r\n\r\n    )\r\n}\r\n\r\nexport default CardSymbol;","import * as PIXI from \"pixi.js\";\r\nimport {CustomPIXIComponent} from \"react-pixi-fiber\";\r\n\r\nexport const drawRectangle = (x, y, width, height) => {\r\n    const g = new PIXI.Graphics();\r\n    g.clear();\r\n    g.beginFill();\r\n    g.drawRect(x, y, width, height);\r\n    g.endFill();\r\n    return g;\r\n};\r\n\r\nexport const drawBrush = ({x, y}, r=20, dragging = true ) => {\r\n    const g = new PIXI.Graphics()\r\n    g.beginFill(0x000000);\r\n    g.drawCircle(x, y, r)\r\n    g.endFill();\r\n    return g\r\n};\r\n\r\nexport const Mask = CustomPIXIComponent(\r\n    {\r\n        customDisplayObject: ({ draw }) => {\r\n            const container = new PIXI.Container();\r\n            container.mask = draw();\r\n            return container;\r\n        },\r\n        customApplyProps: (instance, oldProps, { draw }) => {\r\n            instance.mask = draw();\r\n        }\r\n    },\r\n    \"Mask\"\r\n);","import React from \"react\";\r\nimport {Sprite, Container} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {connect} from \"react-redux\";\r\nimport {getPngName} from \"../../../consts\";\r\nimport CardSymbol from \"../CardSymbol\";\r\nimport {drawBrush, drawRectangle, Mask} from \"../../Mask\";\r\nimport {changeCardStatus} from \"../../../services/CurrentGame\";\r\n\r\nconst frame = getPngName(\"scratch_frame_big\");\r\nconst texture = PIXI.Texture.from(frame)\r\n\r\n\r\nfunction ScratchBig({width, height,card, open, container, scale, status, dispatch, ...props}) {\r\n    const [dragging, setDragging] = React.useState(false)\r\n    const [brush, setBrush] = React.useState(\r\n        drawRectangle(\r\n            0,\r\n            0,\r\n            width,\r\n            height\r\n        )\r\n\r\n    )\r\n\r\n    function pointerMove(event) {\r\n        if (dragging) {\r\n            dispatch({type: \"currentGame/statusCharacter\", payload: \"worry\"})\r\n            // brush.position.copyFrom(event.data.global);\r\n            // console.log(event.data.global, brush)\r\n            setBrush(drawBrush(event.data.global, 100*scale))\r\n            // props.app.renderer.render(brush, texture, false, null, false);\r\n        }\r\n    }\r\n\r\n    function pointerDown(event) {\r\n        setDragging(true);\r\n        pointerMove(event);\r\n    }\r\n\r\n    function pointerUp(event) {\r\n        setDragging(false);\r\n        dispatch({type: \"currentGame/statusCharacter\", payload: \"happy_bonus\"});\r\n        dispatch(changeCardStatus(\"bonus\", 0));\r\n        setBrush(drawRectangle(\r\n            0,\r\n            0,\r\n            width,\r\n            height\r\n        ));\r\n        setTimeout(()=> {\r\n                dispatch({type: \"currentGame/statusCharacter\", payload: \"idle\"})\r\n            }\r\n        ,1000)\r\n    }\r\n    return (<Container\r\n            // x={(container.width - texture.baseTexture.width*1.075)/2 }\r\n            // y={(container.height - texture.baseTexture.height*0.465)/2}\r\n            // width={texture.baseTexture.width}\r\n            // height={texture.baseTexture.height}\r\n            pivot={[texture.baseTexture.width*1.075/2, texture.baseTexture.height*0.465/2]}\r\n            {...props}\r\n        >\r\n            <CardSymbol\r\n                x={texture.baseTexture.width/2}\r\n                y = {texture.baseTexture.height/2}\r\n                card={card}\r\n                visible = {\"play\" === status || \"finish\" === status}\r\n            />\r\n                <Mask draw={()=>brush}\r\n                      visible = {!open}\r\n                >\r\n                    <Sprite\r\n                    interactive\r\n                    dragging ={dragging}\r\n                    pointerup={\"play\" === status ? pointerUp : () => {}}\r\n                    pointerdown={\"play\" === status ? pointerDown : () => {}}\r\n                    pointermove={\"play\" === status ? pointerMove : () => {}}\r\n                    texture={texture}\r\n                    visible = {!open}\r\n                    />\r\n                </Mask>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        width: state.sizes.widthBg,\r\n        height: state.sizes.heightBg,\r\n        scale: state.sizes.scale,\r\n        card: state.currentGame.bonusSet.set[0],\r\n        status: state.currentGame.status,\r\n        open: state.currentGame.open.bonus[0]\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(ScratchBig);","import React from \"react\";\r\nimport {Container, Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {connect} from \"react-redux\";\r\nimport {getPngName} from \"../../../consts\";\r\nimport ScratchBig from \"./ScratchFrameBig\";\r\n\r\nconst bonus = getPngName(\"winner_frame\");\r\nconst texture = PIXI.Texture.from(bonus)\r\n\r\n\r\nfunction Bonus({width, height,card, status, ...props}) {\r\n    const [container, setContainer] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const wrapper = React.useRef();\r\n    React.useEffect(()=> {\r\n            setContainer(wrapper.current);\r\n        }\r\n        ,[])\r\n    return (\r\n    <Sprite\r\n        ref = {wrapper}\r\n        x={width * 0.89 - container.width }\r\n        y={(height*0.075)}\r\n        texture={texture}\r\n    >\r\n        <ScratchBig\r\n            x={(container.width)/2 }\r\n            y={(container.height)/2}\r\n        />\r\n    </Sprite>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        width: state.sizes.widthBg,\r\n        height: state.sizes.heightBg,\r\n        card: state.currentGame.bonusSet.set[0],\r\n        status: state.currentGame.status,\r\n\r\n\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(Bonus);","import * as PIXI from \"pixi.js\";\r\nimport {CustomPIXIComponent} from \"react-pixi-fiber\";\r\nwindow.PIXI = PIXI;\r\nrequire(\"pixi-spine\")\r\nexport const SpineAnimation = CustomPIXIComponent({\r\n    customDisplayObject(props) {\r\n        return new window.PIXI.spine.Spine(props.spine.spineData)\r\n    }\r\n},\r\n    \"Spine\")","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from \"react-redux\";\r\nimport {SpineAnimation} from \"../Spine\";\r\n\r\nfunction Character({app, widthBg, heightBg, statusCharacter}) {\r\n    const ref = React.useRef()\r\n    React.useEffect(()=>{\r\n        // console.log(ref.current);\r\n        ref.current.state.setAnimation(0, `red_${statusCharacter}_loop`, true)\r\n        }\r\n\r\n        ,[statusCharacter])\r\n    return (\r\n        <SpineAnimation\r\n            ref={ref}\r\n            spine = {app.stage.getChildByName('spineCharacter')}\r\n            x ={widthBg * 0.32}\r\n            y = {heightBg*0.32}\r\n\r\n        />\r\n\r\n    );\r\n}\r\n\r\nCharacter.propTypes = {\r\n    app: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        widthBg: state.sizes.widthBg,\r\n        heightBg: state.sizes.heightBg,\r\n        statusCharacter: state.currentGame.statusCharacter,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(Character);","import React from \"react\";\r\nimport {Sprite, Text, Container} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {getPngName} from \"../../../../consts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst fontSize = 52;\r\nconst style = new PIXI.TextStyle({\r\n    fill: \"#f45b4e\",\r\n    fontFamily: \"DRAguSans-Black\",\r\n    fontSize: fontSize,\r\n\r\n});\r\n\r\n\r\nfunction BoardText({suit, status, ...props}) {\r\n    const texture = PIXI.Texture.from(getPngName(suit + \"_small\"))\r\n\r\n    const [current, setCurrent] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const [firstText, setText1] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const [secondText, setText2] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const [suitSymbol, setSymbol] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n\r\n    const wrapper = React.useRef();\r\n    const text1 = React.useRef();\r\n    const text2 = React.useRef();\r\n    const symbol = React.useRef();\r\n\r\n    React.useEffect(()=> {\r\n            setCurrent(wrapper.current);\r\n            setText1(text1.current);\r\n            setText2(text2.current);\r\n            texture.on('update', () => {\r\n                setSymbol(symbol.current);\r\n            });\r\n        }\r\n        ,[])\r\n\r\n    return (\r\n        <Container\r\n            pivot = {[0, current.height/2]}\r\n            ref = {wrapper}\r\n            visible = {\"play\" === status || \"finish\" === status}\r\n\r\n            {...props}\r\n        >\r\n            <Text\r\n                ref={text1}\r\n                style={ style}\r\n                pivot = {[0, firstText.height/2]}\r\n                y = {current.height /2}\r\n                text=\"MATCH THE WINNER\"\r\n            />\r\n            <Sprite\r\n                ref={symbol}\r\n                pivot = {[0, suitSymbol.height/2]}\r\n                x = {firstText.width + suitSymbol.width*0.15}\r\n                y = {current.height /2}\r\n                texture={texture}\r\n            />\r\n            <Text\r\n                ref={text2}\r\n                style={ style}\r\n                pivot = {[0, secondText.height/2]}\r\n                x = {firstText.width + suitSymbol.width*1.3}\r\n                y = {current.height /2}\r\n                text=\"AND WIN A PRIZE!\"\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        suit: state.currentGame.suit,\r\n        status: state.currentGame.status,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(BoardText);","import React from \"react\";\r\nimport {Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {getPngName} from \"../../../../consts\";\r\nimport BoardText from \"./BoardText\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst frame = getPngName(\"frame_for_text\");\r\nconst texture = PIXI.Texture.from(frame)\r\n\r\nfunction BoardHeader({status, ...props}) {\r\n    const [current, setCurrent] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const wrapper = React.useRef();\r\n    React.useEffect(()=> {\r\n            setCurrent(wrapper.current);\r\n        }\r\n        ,[])\r\n\r\n    return (\r\n            <Sprite\r\n                ref = {wrapper}\r\n                texture={texture}\r\n                pivot = {[current.width / 2, current.height/2]}\r\n                {...props}\r\n            >\r\n                <BoardText\r\n                    x = {current.width*0.035}\r\n                    y = {current.height /2}\r\n                />\r\n            </Sprite>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        status: state.currentGame.status,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(BoardHeader);\r\n","import React from \"react\";\r\nimport {Sprite, Container} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {connect} from \"react-redux\";\r\nimport {getPngName} from \"../../../../consts\";\r\nimport CardSymbol from \"../../CardSymbol\";\r\nimport {drawBrush, drawRectangle, Mask} from \"../../../Mask\";\r\nimport {changeCardStatus} from \"../../../../services/CurrentGame\";\r\n\r\nconst scratch = getPngName(\"scratch_frame\");\r\nconst texture = PIXI.Texture.from(scratch)\r\n\r\nconst frame = getPngName(\"frame\");\r\nconst textureBg = PIXI.Texture.from(frame)\r\n\r\nfunction ScratchFrame({width, height, open, card, number, suit, scale, status, dispatch, ...props}) {\r\n    const [dragging, setDragging] = React.useState(false)\r\n    const [brush, setBrush] = React.useState(\r\n        drawRectangle(\r\n            0,\r\n            0,\r\n            width,\r\n            height\r\n        )\r\n\r\n    )\r\n    const [current, setCurrent] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const wrapper = React.useRef()\r\n\r\n    const [bg, setBg] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const frame = React.useRef()\r\n    React.useEffect(()=> {\r\n            if (wrapper.current && wrapper.current.width && wrapper.current.width !== current.width) {\r\n                setCurrent(wrapper.current);\r\n            }\r\n            setBg(frame.current)\r\n        }\r\n        ,[wrapper.current, frame.current])\r\n\r\n    function pointerMove(event) {\r\n        if (dragging) {\r\n            dispatch({type: \"currentGame/statusCharacter\", payload: \"worry\"})\r\n            // brush.position.copyFrom(event.data.global);\r\n            // console.log(event.data.global, brush)\r\n            setBrush(drawBrush(event.data.global, 100*scale))\r\n            // props.app.renderer.render(brush, texture, false, null, false);\r\n        }\r\n    }\r\n\r\n    function pointerDown(event) {\r\n        setDragging(true);\r\n        pointerMove(event);\r\n    }\r\n\r\n    function pointerUp(event) {\r\n        setDragging(false);\r\n        dispatch({\r\n            type: \"currentGame/statusCharacter\",\r\n            payload: card === suit ? \"happy_card\" : \"disappointed\"\r\n        });\r\n        dispatch(changeCardStatus(\"set\", number));\r\n        setBrush(drawRectangle(\r\n            0,\r\n            0,\r\n            width,\r\n            height\r\n        ));\r\n        setTimeout(()=> {\r\n                dispatch({type: \"currentGame/statusCharacter\", payload: \"idle\"})\r\n            }\r\n            ,1000)\r\n    }\r\n    return (<Container\r\n            ref={wrapper}\r\n            pivot = {[texture.baseTexture.width/2, texture.baseTexture.height*0.65]}\r\n            x = {(number%3 -1)*(texture.baseTexture.width*1.2)}\r\n            y = {(Math.floor(number/3))*(texture.baseTexture.height*1.2)}\r\n\r\n        >\r\n        <Sprite\r\n            ref = {frame}\r\n            pivot={[bg.width/2, bg.height/2]}\r\n            texture={textureBg}\r\n            x={current.width/2}\r\n            y = {current.height/2}\r\n        >\r\n                <CardSymbol\r\n                    x={bg.width / 2}\r\n                    y={bg.height / 2}\r\n                    card={card}\r\n                    visible = {status !== \"idle\"}\r\n                />\r\n        </Sprite>\r\n                <Mask draw={()=>brush}\r\n                      visible={!open[number]}\r\n                >\r\n                    <Sprite\r\n                        interactive\r\n                        dragging ={dragging}\r\n                        pointerup={\"play\" === status ? pointerUp : () => {}}\r\n                        pointerdown={\"play\" === status ? pointerDown : () => {}}\r\n                        pointermove={\"play\" === status ? pointerMove : () => {}}\r\n                        // x={(container.width - texture.baseTexture.width*1.075)/2 }\r\n                        // y={(container.height - texture.baseTexture.height*0.465)/2}\r\n                        texture={texture}\r\n                        visible={!open[number]}\r\n                    />\r\n                </Mask>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        width: state.sizes.widthBg,\r\n        height: state.sizes.heightBg,\r\n        scale: state.sizes.scale,\r\n        suit: state.currentGame.suit,\r\n        status: state.currentGame.status,\r\n        open: state.currentGame.open.set\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(ScratchFrame);","import React from \"react\";\r\nimport {Container} from \"react-pixi-fiber\";\r\nimport {connect} from \"react-redux\";\r\nimport ScratchFrame from \"./ScratchFrame\";\r\n\r\n\r\nfunction Set({set, ...props}) {\r\n\r\n    const [current, setCurrent] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n\r\n    const wrapper = React.useRef();\r\n\r\n\r\n    React.useEffect(()=> {\r\n        console.log(wrapper.current.width)\r\n            if (wrapper.current && wrapper.current.width && wrapper.current.width !== current.width) {\r\n                setCurrent(wrapper.current);\r\n            }\r\n        }\r\n        ,[wrapper.current])\r\n\r\n    return (\r\n        <Container\r\n            pivot = {[0, current.height/2]}\r\n            ref = {wrapper}\r\n            {...props}\r\n        >\r\n            {set.map((card, index) => (\r\n                <ScratchFrame\r\n                    key = {index}\r\n                    card={card}\r\n                    number={index}\r\n                />\r\n\r\n            ))}\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        set: state.currentGame.mainSet.set,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(Set);","import React from \"react\";\r\nimport {Container} from \"react-pixi-fiber\";\r\nimport { connect } from \"react-redux\";\r\nimport BoardHeader from \"./BoardHeader/BoardHeader\";\r\nimport Set from \"./Set/Set\";\r\n\r\n\r\nfunction PlayingBoard({width, height, ...props}) {\r\n    const [container, setContainer] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n\r\n    const wrapper = React.useRef();\r\n\r\n    React.useEffect(()=> {\r\n            if (wrapper.current && wrapper.current.width && wrapper.current.width !== container.width) {\r\n                setContainer(wrapper.current);\r\n            }\r\n        }\r\n        ,[wrapper.current])\r\n    return (\r\n        <Container\r\n            ref = {wrapper}\r\n            pivot = {[container.width / 2, 0]}\r\n            x={(width)/2}\r\n            y={(height*1.145)/2}\r\n        >\r\n            <BoardHeader\r\n                x={(container.width)/2}\r\n            />\r\n            <Set\r\n                x={(container.width)/2}\r\n                y = {container.height}\r\n            />\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        width: state.sizes.widthBg,\r\n        height: state.sizes.heightBg,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(PlayingBoard);","import React from \"react\";\r\nimport {Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst header = \"/assets/magic_forest_win_up_to_100.png\";\r\nconst texture = PIXI.Texture.from(header)\r\n\r\n\r\nfunction GameHeader({width, height, ...props}) {\r\n    const [headerWidth, setX] = React.useState(0);\r\n    const wrapper = React.useRef();\r\n    React.useEffect(()=> {\r\n            setX(wrapper.current.width);\r\n        }\r\n        ,[])\r\n    return <Sprite\r\n        ref = {wrapper}\r\n        x={(width - headerWidth)/2}\r\n        y={(height*0.02)}\r\n        texture={texture}\r\n    />\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        width: state.sizes.widthBg,\r\n        height: state.sizes.heightBg,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(GameHeader);","import React from \"react\";\r\nimport {Text} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\n\r\n\r\nconst fontSize = 116;\r\nconst style = new PIXI.TextStyle({\r\n    fill: \"#f45b4e\",\r\n    fontFamily: \"DRAguSans-Black\",\r\n    fontSize: fontSize\r\n});\r\n\r\nfunction WinText(props) {\r\n    const [current, setCurrent] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const wrapper = React.useRef()\r\n    React.useEffect(()=> {\r\n            setCurrent(wrapper.current);\r\n        }\r\n        ,[])\r\n\r\n    return (\r\n            <Text\r\n                ref = {wrapper}\r\n                pivot={[current.width/2, 0]}\r\n                style={ style}\r\n                text=\"YOU WIN\"\r\n                {...props}\r\n            />\r\n    );\r\n}\r\n\r\nexport default WinText;\r\n","import React from \"react\";\r\nimport {Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {getPngName} from \"../../consts\";\r\n\r\nfunction CurrencySymbol({name, ...props}) {\r\n    const textureDollar = PIXI.Texture.from(getPngName(name))\r\n\r\n    const [current, setCurrent] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n\r\n    const wrapper = React.useRef();\r\n\r\n\r\n    React.useEffect(()=> {\r\n            textureDollar.on('update', () => {\r\n                setCurrent(wrapper.current);\r\n            });\r\n        }\r\n        ,[wrapper.current])\r\n    return (\r\n        <Sprite\r\n            ref = {wrapper}\r\n            {...props}\r\n            texture={textureDollar}\r\n            pivot = {[-current.width*0.2, current.height/2]}\r\n        />\r\n    );\r\n}\r\n\r\nexport default CurrencySymbol","import React from \"react\";\r\nimport {Container, Text} from \"react-pixi-fiber\";\r\nimport {connect} from \"react-redux\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport CurrencySymbol from \"./CurrencySymbol\";\r\n\r\nconst fontSize = 126;\r\nconst style = new PIXI.TextStyle({\r\n    fill: \"#311d1f\",\r\n    fontFamily: \"DRAguSans-Black\",\r\n    fontSize: fontSize\r\n});\r\n\r\n\r\nfunction SetValues({bonusWin, setWin, w, ...props}) {\r\n    const countWin = (wins) => {\r\n        const finalWin = {};\r\n        for (let win of wins) {\r\n            for (let [currency, value] of Object.entries(win)) {\r\n                if (value > 0) {\r\n                    if (finalWin[currency]) {\r\n                        finalWin[currency] += value\r\n                    }\r\n                    else {\r\n                        finalWin[currency] = value\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return finalWin\r\n    }\r\n\r\n    const wins = countWin([bonusWin, setWin]);\r\n\r\n\r\n    const [current, setCurrent] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n\r\n    const [dollar, setDollar] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const [coin, setCoin] = React.useState({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n\r\n    const wrapper = React.useRef();\r\n    const currency1 = React.useRef();\r\n    const currency2 = React.useRef();\r\n\r\n    React.useEffect(()=> {\r\n            if (wrapper.current) {\r\n                setCurrent(wrapper.current);\r\n            }\r\n            if (currency1.current) {\r\n                setDollar(currency1.current);\r\n            }\r\n            if (currency2.current) {\r\n                setCoin(currency2.current);\r\n            }\r\n        }\r\n        ,[wrapper.current, currency1.current, currency2.current])\r\n\r\n    return (\r\n        <Container\r\n            pivot = {[current.width/2, 0]}\r\n            ref = {wrapper}\r\n            {...props}\r\n        >\r\n                <Text\r\n                    ref = {currency1}\r\n                    pivot={[(dollar.width)/2, 0]}\r\n                    style={ style}\r\n                    text={wins.dollar}\r\n                    x = {0}\r\n                    visible = {wins.dollar>0}\r\n                >\r\n                    <CurrencySymbol\r\n                        x={dollar.width}\r\n                        y={dollar.height / 2}\r\n                        name={\"dollar_icon\"}\r\n                    />\r\n                </Text>\r\n\r\n                <Text\r\n                    ref = {currency2}\r\n                    pivot={[(coin.width)/2, 0]}\r\n                    style={ style}\r\n                    text={wins.coin}\r\n                    x = {dollar.width + (wins.dollar ? w*2.4 : 0)}\r\n                    visible = {wins.coin>0}\r\n\r\n                >\r\n                    <CurrencySymbol\r\n                        x={coin.width}\r\n                        y={coin.height / 2}\r\n                        name={\"coin_icon_big\"}\r\n                    />\r\n                </Text>\r\n\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        bonusWin: state.currentGame.bonusSet.win,\r\n        setWin: state.currentGame.mainSet.win,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(SetValues);","import React from \"react\";\r\nimport {Sprite} from \"react-pixi-fiber\";\r\nimport * as PIXI from \"pixi.js\";\r\nimport {connect} from \"react-redux\";\r\nimport {getPngName} from \"../../consts\";\r\nimport WinText from \"./WinText\";\r\nimport SetValues from \"./SetValues\";\r\n\r\n\r\nconst banner = getPngName(\"frame1\");\r\nconst texture = PIXI.Texture.from(banner);\r\n\r\nfunction WinBanner({scale, app, status}) {\r\n    const t = PIXI.Texture.from(getPngName(\"dollar_icon\"))\r\n    const [w, setW] = React.useState(0)\r\n\r\n    React.useEffect(()=> {\r\n            t.on('update', () => {\r\n                setW(t.baseTexture.width);\r\n            });\r\n        }\r\n        ,[])\r\n    return (\r\n        <Sprite\r\n            scale = {scale}\r\n            pivot={[texture.baseTexture.width/2, 0]}\r\n            x={(app.renderer.screen.width)/2}\r\n            y={app.renderer.screen.height*0.12}\r\n            texture={texture}\r\n            visible = {status === \"finish\"}\r\n        >\r\n            <WinText\r\n                x={texture.baseTexture.width/2}\r\n                y={texture.baseTexture.height*0.1}\r\n            />\r\n            <SetValues\r\n                x={(texture.baseTexture.width)/2}\r\n                y = {texture.baseTexture.height/2}\r\n                tDollar = {t}\r\n                visible = {w}\r\n                w = {w}\r\n            />\r\n        </Sprite>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        scale: state.sizes.scale,\r\n        status: state.currentGame.status,\r\n\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(WinBanner);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Background from \"./Game/Background\";\r\nimport { connect } from \"react-redux\";\r\nimport StartBanner from \"./StartBanner/StartBanner\";\r\nimport Bonus from \"./Game/Bonus/Bonus\";\r\nimport Character from \"./Game/Character\";\r\nimport {Mask, drawRectangle} from \"./Mask\";\r\nimport PlayingBoard from \"./Game/PlayingBoard/PlayingBoard\";\r\nimport GameHeader from \"./Game/GameHeader\";\r\nimport WinBanner from \"./WinBanner/WinBanner\";\r\n\r\n\r\nfunction Game({status, scale, width, height, dispatch, ...props}) {\r\n\r\n    return (\r\n        <Mask draw={() => drawRectangle(\r\n            ((props.app.renderer.screen.width - width*scale)/2) + width*scale*0.11,\r\n            0,\r\n            width*scale*0.78,\r\n            height\r\n        )}>\r\n            <Background {...props}>\r\n                <Bonus/>\r\n                <Character {...props}/>\r\n                <GameHeader/>\r\n                <PlayingBoard/>\r\n            </Background>\r\n            <WinBanner {...props}/>\r\n            <StartBanner {...props}/>\r\n        </Mask>\r\n\r\n    );\r\n}\r\n\r\nGame.propTypes = {\r\n    app: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = (state /*, ownProps*/) => {\r\n    return {\r\n        status: state.currentGame.status,\r\n        scale: state.sizes.scale,\r\n        width: state.sizes.widthBg,\r\n        height: state.sizes.heightBg,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(Game);","import React from 'react';\nimport { Stage, AppContext } from \"react-pixi-fiber\";\nimport SpineCharacter from \"./components/SpineCharacter\";\nimport Game from \"./components/Game\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/configure-store\";\n\n\nconst height = window.innerHeight;\nconst width = window.innerWidth;\nconst OPTIONS = {\n  backgroundColor: 0x000000,\n  resolution: window.devicePixelRatio || 1,\n  // autoStart:false,\n  height: height,\n  width: width\n};\n\n// const Main = ({app, ...props}) => {\n//     const [pending, setPending] = React.useState(true);\n//\n//     React.useEffect(()=> {\n//         app.loader\n//             .add('spineCharacter', '/assets/char_spine_v5/Red.json')\n//         setTimeout(()=> {\n//                 setPending(false)\n//             }\n//             ,3000)\n//     },[])\n//\n//     return pending ?\n//         (\n//\n//             <SpineCharacter app={app} {...props}/>\n//         ): (\n//             <Game app={app} {...props}/>\n//         )\n//\n// }\n\nfunction App() {\n    const [pending, setPending] = React.useState(true);\n\n    React.useEffect(()=> {\n\n        setTimeout(()=> {\n            setPending(false)\n            }\n            ,3000)\n    },[])\n\n  return (\n\n      <Stage options={OPTIONS}>\n          <Provider store={store}>\n          { (\n              <AppContext.Consumer>\n              {app => pending ? (\n                 <SpineCharacter x={width / 2} y={height / 2} app={app}/>\n              ): (\n                  <Game  x={width / 2} y={height / 2}  app={app}/>\n              )}\n          </AppContext.Consumer>\n          )\n          }\n          </Provider>\n      </Stage>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n\n          <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}